//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ETicketWebClient.ETicketService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Event", Namespace="http://schemas.datacontract.org/2004/07/Domain")]
    [System.SerializableAttribute()]
    public partial class Event : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AvailableTicketsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EventIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime GateOpensField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime StartTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal TicketPriceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AvailableTickets {
            get {
                return this.AvailableTicketsField;
            }
            set {
                if ((this.AvailableTicketsField.Equals(value) != true)) {
                    this.AvailableTicketsField = value;
                    this.RaisePropertyChanged("AvailableTickets");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EventId {
            get {
                return this.EventIdField;
            }
            set {
                if ((this.EventIdField.Equals(value) != true)) {
                    this.EventIdField = value;
                    this.RaisePropertyChanged("EventId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Gate {
            get {
                return this.GateField;
            }
            set {
                if ((object.ReferenceEquals(this.GateField, value) != true)) {
                    this.GateField = value;
                    this.RaisePropertyChanged("Gate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime GateOpens {
            get {
                return this.GateOpensField;
            }
            set {
                if ((this.GateOpensField.Equals(value) != true)) {
                    this.GateOpensField = value;
                    this.RaisePropertyChanged("GateOpens");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StartTime {
            get {
                return this.StartTimeField;
            }
            set {
                if ((this.StartTimeField.Equals(value) != true)) {
                    this.StartTimeField = value;
                    this.RaisePropertyChanged("StartTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal TicketPrice {
            get {
                return this.TicketPriceField;
            }
            set {
                if ((this.TicketPriceField.Equals(value) != true)) {
                    this.TicketPriceField = value;
                    this.RaisePropertyChanged("TicketPrice");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AdminInfo", Namespace="http://schemas.datacontract.org/2004/07/Domain")]
    [System.SerializableAttribute()]
    public partial class AdminInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Seat", Namespace="http://schemas.datacontract.org/2004/07/Domain")]
    [System.SerializableAttribute()]
    public partial class Seat : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool AvailableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EventIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SeatIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SeatNumberField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Available {
            get {
                return this.AvailableField;
            }
            set {
                if ((this.AvailableField.Equals(value) != true)) {
                    this.AvailableField = value;
                    this.RaisePropertyChanged("Available");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EventId {
            get {
                return this.EventIdField;
            }
            set {
                if ((this.EventIdField.Equals(value) != true)) {
                    this.EventIdField = value;
                    this.RaisePropertyChanged("EventId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SeatId {
            get {
                return this.SeatIdField;
            }
            set {
                if ((this.SeatIdField.Equals(value) != true)) {
                    this.SeatIdField = value;
                    this.RaisePropertyChanged("SeatId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SeatNumber {
            get {
                return this.SeatNumberField;
            }
            set {
                if ((this.SeatNumberField.Equals(value) != true)) {
                    this.SeatNumberField = value;
                    this.RaisePropertyChanged("SeatNumber");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Order", Namespace="http://schemas.datacontract.org/2004/07/Domain")]
    [System.SerializableAttribute()]
    public partial class Order : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CustomerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EventIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OrderIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int QuantityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal TotalPriceField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CustomerId {
            get {
                return this.CustomerIdField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomerIdField, value) != true)) {
                    this.CustomerIdField = value;
                    this.RaisePropertyChanged("CustomerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EventId {
            get {
                return this.EventIdField;
            }
            set {
                if ((this.EventIdField.Equals(value) != true)) {
                    this.EventIdField = value;
                    this.RaisePropertyChanged("EventId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OrderId {
            get {
                return this.OrderIdField;
            }
            set {
                if ((this.OrderIdField.Equals(value) != true)) {
                    this.OrderIdField = value;
                    this.RaisePropertyChanged("OrderId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Quantity {
            get {
                return this.QuantityField;
            }
            set {
                if ((this.QuantityField.Equals(value) != true)) {
                    this.QuantityField = value;
                    this.RaisePropertyChanged("Quantity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal TotalPrice {
            get {
                return this.TotalPriceField;
            }
            set {
                if ((this.TotalPriceField.Equals(value) != true)) {
                    this.TotalPriceField = value;
                    this.RaisePropertyChanged("TotalPrice");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Ticket", Namespace="http://schemas.datacontract.org/2004/07/Domain")]
    [System.SerializableAttribute()]
    public partial class Ticket : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CustomerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EventIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SeatIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TicketIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CustomerId {
            get {
                return this.CustomerIdField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomerIdField, value) != true)) {
                    this.CustomerIdField = value;
                    this.RaisePropertyChanged("CustomerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EventId {
            get {
                return this.EventIdField;
            }
            set {
                if ((this.EventIdField.Equals(value) != true)) {
                    this.EventIdField = value;
                    this.RaisePropertyChanged("EventId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SeatId {
            get {
                return this.SeatIdField;
            }
            set {
                if ((this.SeatIdField.Equals(value) != true)) {
                    this.SeatIdField = value;
                    this.RaisePropertyChanged("SeatId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TicketId {
            get {
                return this.TicketIdField;
            }
            set {
                if ((this.TicketIdField.Equals(value) != true)) {
                    this.TicketIdField = value;
                    this.RaisePropertyChanged("TicketId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ETicketService.IEventService")]
    public interface IEventService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/GetEvent", ReplyAction="http://tempuri.org/IEventService/GetEventResponse")]
        ETicketWebClient.ETicketService.Event GetEvent(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/GetEvent", ReplyAction="http://tempuri.org/IEventService/GetEventResponse")]
        System.Threading.Tasks.Task<ETicketWebClient.ETicketService.Event> GetEventAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/CreateEvent", ReplyAction="http://tempuri.org/IEventService/CreateEventResponse")]
        void CreateEvent(ETicketWebClient.ETicketService.Event myEvent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/CreateEvent", ReplyAction="http://tempuri.org/IEventService/CreateEventResponse")]
        System.Threading.Tasks.Task CreateEventAsync(ETicketWebClient.ETicketService.Event myEvent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/DeleteEvent", ReplyAction="http://tempuri.org/IEventService/DeleteEventResponse")]
        void DeleteEvent(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/DeleteEvent", ReplyAction="http://tempuri.org/IEventService/DeleteEventResponse")]
        System.Threading.Tasks.Task DeleteEventAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/UpdateEvent", ReplyAction="http://tempuri.org/IEventService/UpdateEventResponse")]
        void UpdateEvent(ETicketWebClient.ETicketService.Event myEvent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/UpdateEvent", ReplyAction="http://tempuri.org/IEventService/UpdateEventResponse")]
        System.Threading.Tasks.Task UpdateEventAsync(ETicketWebClient.ETicketService.Event myEvent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/GetAllEvents", ReplyAction="http://tempuri.org/IEventService/GetAllEventsResponse")]
        ETicketWebClient.ETicketService.Event[] GetAllEvents();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/GetAllEvents", ReplyAction="http://tempuri.org/IEventService/GetAllEventsResponse")]
        System.Threading.Tasks.Task<ETicketWebClient.ETicketService.Event[]> GetAllEventsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEventServiceChannel : ETicketWebClient.ETicketService.IEventService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EventServiceClient : System.ServiceModel.ClientBase<ETicketWebClient.ETicketService.IEventService>, ETicketWebClient.ETicketService.IEventService {
        
        public EventServiceClient() {
        }
        
        public EventServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EventServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EventServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EventServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ETicketWebClient.ETicketService.Event GetEvent(int id) {
            return base.Channel.GetEvent(id);
        }
        
        public System.Threading.Tasks.Task<ETicketWebClient.ETicketService.Event> GetEventAsync(int id) {
            return base.Channel.GetEventAsync(id);
        }
        
        public void CreateEvent(ETicketWebClient.ETicketService.Event myEvent) {
            base.Channel.CreateEvent(myEvent);
        }
        
        public System.Threading.Tasks.Task CreateEventAsync(ETicketWebClient.ETicketService.Event myEvent) {
            return base.Channel.CreateEventAsync(myEvent);
        }
        
        public void DeleteEvent(int id) {
            base.Channel.DeleteEvent(id);
        }
        
        public System.Threading.Tasks.Task DeleteEventAsync(int id) {
            return base.Channel.DeleteEventAsync(id);
        }
        
        public void UpdateEvent(ETicketWebClient.ETicketService.Event myEvent) {
            base.Channel.UpdateEvent(myEvent);
        }
        
        public System.Threading.Tasks.Task UpdateEventAsync(ETicketWebClient.ETicketService.Event myEvent) {
            return base.Channel.UpdateEventAsync(myEvent);
        }
        
        public ETicketWebClient.ETicketService.Event[] GetAllEvents() {
            return base.Channel.GetAllEvents();
        }
        
        public System.Threading.Tasks.Task<ETicketWebClient.ETicketService.Event[]> GetAllEventsAsync() {
            return base.Channel.GetAllEventsAsync();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ETicketService.IAdminService")]
    public interface IAdminService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetAdminInfo", ReplyAction="http://tempuri.org/IAdminService/GetAdminInfoResponse")]
        ETicketWebClient.ETicketService.AdminInfo GetAdminInfo(string AdminUsername);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetAdminInfo", ReplyAction="http://tempuri.org/IAdminService/GetAdminInfoResponse")]
        System.Threading.Tasks.Task<ETicketWebClient.ETicketService.AdminInfo> GetAdminInfoAsync(string AdminUsername);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAdminServiceChannel : ETicketWebClient.ETicketService.IAdminService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AdminServiceClient : System.ServiceModel.ClientBase<ETicketWebClient.ETicketService.IAdminService>, ETicketWebClient.ETicketService.IAdminService {
        
        public AdminServiceClient() {
        }
        
        public AdminServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AdminServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AdminServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AdminServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ETicketWebClient.ETicketService.AdminInfo GetAdminInfo(string AdminUsername) {
            return base.Channel.GetAdminInfo(AdminUsername);
        }
        
        public System.Threading.Tasks.Task<ETicketWebClient.ETicketService.AdminInfo> GetAdminInfoAsync(string AdminUsername) {
            return base.Channel.GetAdminInfoAsync(AdminUsername);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ETicketService.ISeatService")]
    public interface ISeatService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISeatService/GetSeat", ReplyAction="http://tempuri.org/ISeatService/GetSeatResponse")]
        ETicketWebClient.ETicketService.Seat GetSeat(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISeatService/GetSeat", ReplyAction="http://tempuri.org/ISeatService/GetSeatResponse")]
        System.Threading.Tasks.Task<ETicketWebClient.ETicketService.Seat> GetSeatAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISeatService/DeleteSeat", ReplyAction="http://tempuri.org/ISeatService/DeleteSeatResponse")]
        void DeleteSeat(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISeatService/DeleteSeat", ReplyAction="http://tempuri.org/ISeatService/DeleteSeatResponse")]
        System.Threading.Tasks.Task DeleteSeatAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISeatService/CreateSeat", ReplyAction="http://tempuri.org/ISeatService/CreateSeatResponse")]
        void CreateSeat(ETicketWebClient.ETicketService.Seat mySeat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISeatService/CreateSeat", ReplyAction="http://tempuri.org/ISeatService/CreateSeatResponse")]
        System.Threading.Tasks.Task CreateSeatAsync(ETicketWebClient.ETicketService.Seat mySeat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISeatService/UpdateSeat", ReplyAction="http://tempuri.org/ISeatService/UpdateSeatResponse")]
        void UpdateSeat(ETicketWebClient.ETicketService.Seat mySeat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISeatService/UpdateSeat", ReplyAction="http://tempuri.org/ISeatService/UpdateSeatResponse")]
        System.Threading.Tasks.Task UpdateSeatAsync(ETicketWebClient.ETicketService.Seat mySeat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISeatService/GetAllSeats", ReplyAction="http://tempuri.org/ISeatService/GetAllSeatsResponse")]
        ETicketWebClient.ETicketService.Seat[] GetAllSeats();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISeatService/GetAllSeats", ReplyAction="http://tempuri.org/ISeatService/GetAllSeatsResponse")]
        System.Threading.Tasks.Task<ETicketWebClient.ETicketService.Seat[]> GetAllSeatsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISeatServiceChannel : ETicketWebClient.ETicketService.ISeatService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SeatServiceClient : System.ServiceModel.ClientBase<ETicketWebClient.ETicketService.ISeatService>, ETicketWebClient.ETicketService.ISeatService {
        
        public SeatServiceClient() {
        }
        
        public SeatServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SeatServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SeatServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SeatServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ETicketWebClient.ETicketService.Seat GetSeat(int id) {
            return base.Channel.GetSeat(id);
        }
        
        public System.Threading.Tasks.Task<ETicketWebClient.ETicketService.Seat> GetSeatAsync(int id) {
            return base.Channel.GetSeatAsync(id);
        }
        
        public void DeleteSeat(int id) {
            base.Channel.DeleteSeat(id);
        }
        
        public System.Threading.Tasks.Task DeleteSeatAsync(int id) {
            return base.Channel.DeleteSeatAsync(id);
        }
        
        public void CreateSeat(ETicketWebClient.ETicketService.Seat mySeat) {
            base.Channel.CreateSeat(mySeat);
        }
        
        public System.Threading.Tasks.Task CreateSeatAsync(ETicketWebClient.ETicketService.Seat mySeat) {
            return base.Channel.CreateSeatAsync(mySeat);
        }
        
        public void UpdateSeat(ETicketWebClient.ETicketService.Seat mySeat) {
            base.Channel.UpdateSeat(mySeat);
        }
        
        public System.Threading.Tasks.Task UpdateSeatAsync(ETicketWebClient.ETicketService.Seat mySeat) {
            return base.Channel.UpdateSeatAsync(mySeat);
        }
        
        public ETicketWebClient.ETicketService.Seat[] GetAllSeats() {
            return base.Channel.GetAllSeats();
        }
        
        public System.Threading.Tasks.Task<ETicketWebClient.ETicketService.Seat[]> GetAllSeatsAsync() {
            return base.Channel.GetAllSeatsAsync();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ETicketService.IOrderService")]
    public interface IOrderService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetOrder", ReplyAction="http://tempuri.org/IOrderService/GetOrderResponse")]
        ETicketWebClient.ETicketService.Order GetOrder(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetOrder", ReplyAction="http://tempuri.org/IOrderService/GetOrderResponse")]
        System.Threading.Tasks.Task<ETicketWebClient.ETicketService.Order> GetOrderAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/CreateOrder", ReplyAction="http://tempuri.org/IOrderService/CreateOrderResponse")]
        int CreateOrder(ETicketWebClient.ETicketService.Order myOrder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/CreateOrder", ReplyAction="http://tempuri.org/IOrderService/CreateOrderResponse")]
        System.Threading.Tasks.Task<int> CreateOrderAsync(ETicketWebClient.ETicketService.Order myOrder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/DeleteOrder", ReplyAction="http://tempuri.org/IOrderService/DeleteOrderResponse")]
        void DeleteOrder(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/DeleteOrder", ReplyAction="http://tempuri.org/IOrderService/DeleteOrderResponse")]
        System.Threading.Tasks.Task DeleteOrderAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/UpdateOrder", ReplyAction="http://tempuri.org/IOrderService/UpdateOrderResponse")]
        void UpdateOrder(ETicketWebClient.ETicketService.Order myOrder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/UpdateOrder", ReplyAction="http://tempuri.org/IOrderService/UpdateOrderResponse")]
        System.Threading.Tasks.Task UpdateOrderAsync(ETicketWebClient.ETicketService.Order myOrder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetAllOrders", ReplyAction="http://tempuri.org/IOrderService/GetAllOrdersResponse")]
        ETicketWebClient.ETicketService.Order[] GetAllOrders();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetAllOrders", ReplyAction="http://tempuri.org/IOrderService/GetAllOrdersResponse")]
        System.Threading.Tasks.Task<ETicketWebClient.ETicketService.Order[]> GetAllOrdersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetOrdersOfCustomer", ReplyAction="http://tempuri.org/IOrderService/GetOrdersOfCustomerResponse")]
        ETicketWebClient.ETicketService.Order[] GetOrdersOfCustomer(string CustomerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetOrdersOfCustomer", ReplyAction="http://tempuri.org/IOrderService/GetOrdersOfCustomerResponse")]
        System.Threading.Tasks.Task<ETicketWebClient.ETicketService.Order[]> GetOrdersOfCustomerAsync(string CustomerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetOrderTickets", ReplyAction="http://tempuri.org/IOrderService/GetOrderTicketsResponse")]
        ETicketWebClient.ETicketService.Ticket[] GetOrderTickets(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetOrderTickets", ReplyAction="http://tempuri.org/IOrderService/GetOrderTicketsResponse")]
        System.Threading.Tasks.Task<ETicketWebClient.ETicketService.Ticket[]> GetOrderTicketsAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/Cancel", ReplyAction="http://tempuri.org/IOrderService/CancelResponse")]
        void Cancel(ETicketWebClient.ETicketService.Order order);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/Cancel", ReplyAction="http://tempuri.org/IOrderService/CancelResponse")]
        System.Threading.Tasks.Task CancelAsync(ETicketWebClient.ETicketService.Order order);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IOrderServiceChannel : ETicketWebClient.ETicketService.IOrderService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class OrderServiceClient : System.ServiceModel.ClientBase<ETicketWebClient.ETicketService.IOrderService>, ETicketWebClient.ETicketService.IOrderService {
        
        public OrderServiceClient() {
        }
        
        public OrderServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public OrderServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OrderServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OrderServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ETicketWebClient.ETicketService.Order GetOrder(int id) {
            return base.Channel.GetOrder(id);
        }
        
        public System.Threading.Tasks.Task<ETicketWebClient.ETicketService.Order> GetOrderAsync(int id) {
            return base.Channel.GetOrderAsync(id);
        }
        
        public int CreateOrder(ETicketWebClient.ETicketService.Order myOrder) {
            return base.Channel.CreateOrder(myOrder);
        }
        
        public System.Threading.Tasks.Task<int> CreateOrderAsync(ETicketWebClient.ETicketService.Order myOrder) {
            return base.Channel.CreateOrderAsync(myOrder);
        }
        
        public void DeleteOrder(int id) {
            base.Channel.DeleteOrder(id);
        }
        
        public System.Threading.Tasks.Task DeleteOrderAsync(int id) {
            return base.Channel.DeleteOrderAsync(id);
        }
        
        public void UpdateOrder(ETicketWebClient.ETicketService.Order myOrder) {
            base.Channel.UpdateOrder(myOrder);
        }
        
        public System.Threading.Tasks.Task UpdateOrderAsync(ETicketWebClient.ETicketService.Order myOrder) {
            return base.Channel.UpdateOrderAsync(myOrder);
        }
        
        public ETicketWebClient.ETicketService.Order[] GetAllOrders() {
            return base.Channel.GetAllOrders();
        }
        
        public System.Threading.Tasks.Task<ETicketWebClient.ETicketService.Order[]> GetAllOrdersAsync() {
            return base.Channel.GetAllOrdersAsync();
        }
        
        public ETicketWebClient.ETicketService.Order[] GetOrdersOfCustomer(string CustomerId) {
            return base.Channel.GetOrdersOfCustomer(CustomerId);
        }
        
        public System.Threading.Tasks.Task<ETicketWebClient.ETicketService.Order[]> GetOrdersOfCustomerAsync(string CustomerId) {
            return base.Channel.GetOrdersOfCustomerAsync(CustomerId);
        }
        
        public ETicketWebClient.ETicketService.Ticket[] GetOrderTickets(int id) {
            return base.Channel.GetOrderTickets(id);
        }
        
        public System.Threading.Tasks.Task<ETicketWebClient.ETicketService.Ticket[]> GetOrderTicketsAsync(int id) {
            return base.Channel.GetOrderTicketsAsync(id);
        }
        
        public void Cancel(ETicketWebClient.ETicketService.Order order) {
            base.Channel.Cancel(order);
        }
        
        public System.Threading.Tasks.Task CancelAsync(ETicketWebClient.ETicketService.Order order) {
            return base.Channel.CancelAsync(order);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ETicketService.ITicketService")]
    public interface ITicketService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketService/GetTicket", ReplyAction="http://tempuri.org/ITicketService/GetTicketResponse")]
        ETicketWebClient.ETicketService.Ticket GetTicket(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketService/GetTicket", ReplyAction="http://tempuri.org/ITicketService/GetTicketResponse")]
        System.Threading.Tasks.Task<ETicketWebClient.ETicketService.Ticket> GetTicketAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketService/CreateTicket", ReplyAction="http://tempuri.org/ITicketService/CreateTicketResponse")]
        void CreateTicket(ETicketWebClient.ETicketService.Ticket myTicket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketService/CreateTicket", ReplyAction="http://tempuri.org/ITicketService/CreateTicketResponse")]
        System.Threading.Tasks.Task CreateTicketAsync(ETicketWebClient.ETicketService.Ticket myTicket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketService/DeleteTicket", ReplyAction="http://tempuri.org/ITicketService/DeleteTicketResponse")]
        void DeleteTicket(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketService/DeleteTicket", ReplyAction="http://tempuri.org/ITicketService/DeleteTicketResponse")]
        System.Threading.Tasks.Task DeleteTicketAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketService/UpdateTicket", ReplyAction="http://tempuri.org/ITicketService/UpdateTicketResponse")]
        void UpdateTicket(ETicketWebClient.ETicketService.Ticket myTicket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketService/UpdateTicket", ReplyAction="http://tempuri.org/ITicketService/UpdateTicketResponse")]
        System.Threading.Tasks.Task UpdateTicketAsync(ETicketWebClient.ETicketService.Ticket myTicket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketService/GetAllTickets", ReplyAction="http://tempuri.org/ITicketService/GetAllTicketsResponse")]
        ETicketWebClient.ETicketService.Ticket[] GetAllTickets();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketService/GetAllTickets", ReplyAction="http://tempuri.org/ITicketService/GetAllTicketsResponse")]
        System.Threading.Tasks.Task<ETicketWebClient.ETicketService.Ticket[]> GetAllTicketsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITicketServiceChannel : ETicketWebClient.ETicketService.ITicketService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TicketServiceClient : System.ServiceModel.ClientBase<ETicketWebClient.ETicketService.ITicketService>, ETicketWebClient.ETicketService.ITicketService {
        
        public TicketServiceClient() {
        }
        
        public TicketServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TicketServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TicketServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TicketServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ETicketWebClient.ETicketService.Ticket GetTicket(int id) {
            return base.Channel.GetTicket(id);
        }
        
        public System.Threading.Tasks.Task<ETicketWebClient.ETicketService.Ticket> GetTicketAsync(int id) {
            return base.Channel.GetTicketAsync(id);
        }
        
        public void CreateTicket(ETicketWebClient.ETicketService.Ticket myTicket) {
            base.Channel.CreateTicket(myTicket);
        }
        
        public System.Threading.Tasks.Task CreateTicketAsync(ETicketWebClient.ETicketService.Ticket myTicket) {
            return base.Channel.CreateTicketAsync(myTicket);
        }
        
        public void DeleteTicket(int id) {
            base.Channel.DeleteTicket(id);
        }
        
        public System.Threading.Tasks.Task DeleteTicketAsync(int id) {
            return base.Channel.DeleteTicketAsync(id);
        }
        
        public void UpdateTicket(ETicketWebClient.ETicketService.Ticket myTicket) {
            base.Channel.UpdateTicket(myTicket);
        }
        
        public System.Threading.Tasks.Task UpdateTicketAsync(ETicketWebClient.ETicketService.Ticket myTicket) {
            return base.Channel.UpdateTicketAsync(myTicket);
        }
        
        public ETicketWebClient.ETicketService.Ticket[] GetAllTickets() {
            return base.Channel.GetAllTickets();
        }
        
        public System.Threading.Tasks.Task<ETicketWebClient.ETicketService.Ticket[]> GetAllTicketsAsync() {
            return base.Channel.GetAllTicketsAsync();
        }
    }
}
